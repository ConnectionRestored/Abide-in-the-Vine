/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => BibleLinkerPlugin
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/modals/copy-verse-modal.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/logic/copy-command.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/utils/regexes.ts
var oneVerseRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*$/);
var multipleVersesRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*[-.=]\s*(\d+)\s*$/);
var bookAndChapterRegexForOBSK = /([^,:#]+)\s(\d+)/;
var multipleChapters = /(\d*[^\d,:#]+)\s*(\d+)\s*-\s*(\d+)\s*$/;
var isOBSKFile = /([a-zA-Z0-9 ]+)-(\d{2,3})/;

// src/logic/common.ts
var import_obsidian = __toModule(require("obsidian"));
function capitalize(str) {
  str = str.toLocaleLowerCase();
  for (let i = 0; i < str.length; i++) {
    if (/[^\s\d.,#-]/.test(str.charAt(i))) {
      return str.slice(0, i) + str.charAt(i).toUpperCase() + str.slice(i + 1);
    }
  }
  return str;
}
function parseUserVerseInput(userInput, verbose = true) {
  let bookAndChapter;
  let beginVerse;
  let endVerse;
  switch (true) {
    case oneVerseRegEx.test(userInput): {
      const [, matchedChapter, matchedVerse] = userInput.match(oneVerseRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedVerse);
      endVerse = Number(matchedVerse);
      break;
    }
    case multipleVersesRegEx.test(userInput): {
      const [, matchedChapter, matchedBeginVerse, matchedEndVerse] = userInput.match(multipleVersesRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedBeginVerse);
      endVerse = Number(matchedEndVerse);
      break;
    }
    default: {
      if (verbose) {
        new import_obsidian.Notice(`Wrong format "${userInput}"`);
      }
      throw "Could not parse user input";
    }
  }
  return { bookAndChapter, beginVerse, endVerse };
}
function parseUserBookInput(userInput) {
  let book;
  let firstChapter;
  let lastChapter;
  switch (true) {
    case multipleChapters.test(userInput): {
      const [, matchedBook, matchedFirstChapter, matchedLastChapter] = userInput.match(multipleChapters);
      book = matchedBook.trim();
      firstChapter = Number(matchedFirstChapter);
      lastChapter = Number(matchedLastChapter);
      break;
    }
    default: {
      new import_obsidian.Notice(`Wrong format "${userInput}"`);
      throw "Could not parse user input";
    }
  }
  return { book, firstChapter, lastChapter };
}
function getFileByFilename(app, filename, path = "/") {
  let filenameCopy = filename;
  let tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  if (!tFile) {
    filenameCopy = tryConvertToOBSKFileName(filenameCopy);
    tFile = app.metadataCache.getFirstLinkpathDest(filenameCopy, path);
  }
  return { fileName: filenameCopy, tFile };
}
function tryConvertToOBSKFileName(bookAndChapter) {
  if (bookAndChapterRegexForOBSK.test(bookAndChapter)) {
    let [, book, number] = bookAndChapter.match(bookAndChapterRegexForOBSK);
    if (number.length == 1) {
      number = `0${number}`;
    }
    return `${book}-${number}`;
  }
}

// src/logic/copy-command.ts
function getTextOfVerses(app, userInput, settings, translationPath, verbose = true) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserVerseInput(userInput, verbose);
    bookAndChapter = capitalize(bookAndChapter);
    const { fileName, tFile } = getFileByFilename(app, bookAndChapter, translationPath);
    if (tFile) {
      return yield createCopyOutput(app, tFile, fileName, beginVerse, endVerse, settings, translationPath, verbose);
    } else {
      if (verbose) {
        new import_obsidian2.Notice(`File ${bookAndChapter} not found`);
      }
      throw "File not found";
    }
  });
}
function getVerseText(verseNumber, headings, lines, keepNewlines, newLinePrefix) {
  if (verseNumber >= headings.length) {
    new import_obsidian2.Notice("Verse out of range for given file");
    throw `VerseNumber ${verseNumber} is out of range of headings with length ${headings.length}`;
  }
  const headingLine = headings[verseNumber].position.start.line;
  if (headingLine + 1 >= lines.length) {
    new import_obsidian2.Notice("Logical error - please create issue on plugin's GitHub with your input and the file you were referencing. Thank you!");
    throw `HeadingLine ${headingLine + 1} is out of range of lines with length ${lines}`;
  }
  let output = "";
  let line = "";
  let i = 1;
  let isFirst = true;
  while (true) {
    line = lines[headingLine + i];
    if (/^#/.test(line) || !line && !isFirst) {
      break;
    }
    i++;
    if (line) {
      if (!isFirst) {
        output += keepNewlines ? `
${newLinePrefix}` : " ";
      }
      isFirst = false;
      output += line;
    }
  }
  return output;
}
function replaceNewline(input) {
  return input.replace(/\\n/g, "\n");
}
function createBookAndChapterOutput(fileBasename) {
  if (isOBSKFile.test(fileBasename)) {
    let [, filename, chapter] = fileBasename.match(isOBSKFile);
    if (chapter.toString()[0] === "0") {
      chapter = chapter.substring(1);
    }
    return filename + " " + chapter;
  }
  return fileBasename;
}
function getFileFolderInTranslation(app, filename, translation) {
  const tFileInfo = getFileByFilename(app, filename, translation);
  return tFileInfo.tFile.parent.path;
}
function createCopyOutput(app, tFile, fileName, beginVerse, endVerse, settings, translationPath, verbose) {
  return __async(this, null, function* () {
    const bookAndChapterOutput = createBookAndChapterOutput(tFile.basename);
    const file = app.vault.read(tFile);
    const lines = (yield file).split(/\r?\n/);
    const verseHeadingLevel = settings.verseHeadingLevel;
    const headings = app.metadataCache.getFileCache(tFile).headings.filter((heading) => !verseHeadingLevel || heading.level === verseHeadingLevel);
    const beginVerseNoOffset = beginVerse;
    const endVerseNoOffset = endVerse;
    beginVerse += settings.verseOffset;
    endVerse += settings.verseOffset;
    if (beginVerse > endVerse) {
      if (verbose) {
        new import_obsidian2.Notice("Begin verse is bigger than end verse");
      }
      throw "Begin verse is bigger than end verse";
    }
    if (headings.length <= beginVerse) {
      if (verbose) {
        new import_obsidian2.Notice("Begin verse out of range of chapter");
      }
      throw "Begin verse out of range of chapter";
    }
    let res = settings.prefix;
    const postfix = settings.postfix ? replaceNewline(settings.postfix) : " ";
    let pathToUse = "";
    if (settings.enableMultipleTranslations) {
      if (settings.translationLinkingType !== "main")
        pathToUse = getFileFolderInTranslation(app, fileName, translationPath);
      else {
        pathToUse = getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first());
      }
    }
    if (beginVerse === endVerse) {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.oneVerseNotation}${beginVerseNoOffset}]]${postfix}`;
    } else if (settings.linkEndVerse) {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.multipleVersesNotation}${beginVerseNoOffset}-]]`;
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[endVerse].heading}|${endVerseNoOffset}]]${postfix}`;
    } else {
      res += `[[${pathToUse ? pathToUse + "/" : ""}${fileName}#${headings[beginVerse].heading}|${bookAndChapterOutput}${settings.multipleVersesNotation}${beginVerseNoOffset}-${endVerseNoOffset}]]${postfix}`;
    }
    for (let i = beginVerse; i <= endVerse; i++) {
      let versePrefix = "";
      const versePostfix = settings.insertSpace ? " " : "";
      if (settings.eachVersePrefix) {
        versePrefix += settings.eachVersePrefix.replace(/{n}/g, (i - settings.verseOffset).toString());
        versePrefix = versePrefix.replace(/{f}/g, `${fileName}`);
      }
      const verseText = getVerseText(i, headings, lines, settings.newLines, settings.prefix);
      if (settings.newLines) {
        res += "\n" + settings.prefix + versePrefix + verseText;
      } else {
        res += versePrefix + verseText + versePostfix;
      }
    }
    if (!settings.useInvisibleLinks)
      return res;
    if (beginVerse == endVerse && (!settings.enableMultipleTranslations || settings.translationLinkingType === "main" || settings.translationLinkingType === "used"))
      return res;
    if (settings.newLines) {
      res += `
${settings.prefix}`;
    }
    for (let i = beginVerse; i <= endVerse; i++) {
      if (!settings.enableMultipleTranslations) {
        res += `[[${fileName}#${headings[i].heading}|]]`;
      } else {
        let translationPathsToUse = [];
        switch (settings.translationLinkingType) {
          case "all":
            translationPathsToUse = settings.parsedTranslationPaths.map((tr) => getFileFolderInTranslation(app, fileName, tr));
            break;
          case "used":
            translationPathsToUse = [getFileFolderInTranslation(app, fileName, translationPath)];
            break;
          case "usedAndMain":
            if (translationPath !== settings.parsedTranslationPaths.first()) {
              translationPathsToUse = [
                getFileFolderInTranslation(app, fileName, translationPath),
                getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first())
              ];
            } else {
              translationPathsToUse = [getFileFolderInTranslation(app, fileName, translationPath)];
            }
            break;
          case "main":
            translationPathsToUse = [getFileFolderInTranslation(app, fileName, settings.parsedTranslationPaths.first())];
            break;
          default:
            break;
        }
        translationPathsToUse.forEach((translationPath2) => {
          res += `[[${translationPath2}/${fileName}#${headings[i].heading}|]]`;
        });
      }
    }
    return res;
  });
}

// src/modals/copy-verse-modal.ts
function setPreviewText(previewEl, userInput, pluginSettings, translationPath) {
  return __async(this, null, function* () {
    try {
      const res = yield getTextOfVerses(this.app, userInput, pluginSettings, translationPath, false);
      previewEl.setText(res);
    } catch (e) {
      previewEl.setText("");
      return;
    }
  });
}
var CopyVerseModal = class extends import_obsidian3.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield getTextOfVerses(this.app, this.userInput, this.pluginSettings, this.translationPath);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
  }
  onOpen() {
    const { contentEl } = this;
    let previewEl;
    contentEl.createEl("h3", { text: "Copy verse by bible reference" });
    new import_obsidian3.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
      setPreviewText(previewEl, this.userInput, this.pluginSettings, this.translationPath);
    }).inputEl.focus());
    if (this.pluginSettings.enableMultipleTranslations && this.pluginSettings.translationsPaths !== "") {
      const transationPicker = new import_obsidian3.Setting(contentEl).setName("Pick translation");
      let buttons = [];
      let buttonPathMap = new Map();
      this.pluginSettings.parsedTranslationPaths.forEach((path) => {
        transationPicker.addButton((btn) => {
          buttons.push(btn);
          buttonPathMap.set(btn, path);
          let splittedPath = path.split("/");
          btn.setButtonText(splittedPath[splittedPath.length - 2]);
        });
        buttons.forEach((btn) => {
          btn.onClick(() => {
            buttons.forEach((b) => b.removeCta());
            btn.setCta();
            this.translationPath = buttonPathMap.get(btn);
            setPreviewText(previewEl, this.userInput, this.pluginSettings, this.translationPath);
          });
        });
        buttons.first().setCta();
        this.translationPath = buttonPathMap.get(buttons.first());
      });
    }
    contentEl.createEl("label", { text: "Preview" });
    previewEl = contentEl.createEl("textarea", { cls: "copy-preview", attr: { readonly: true } });
    new import_obsidian3.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/link-verse-modal.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/logic/link-command.ts
var import_obsidian4 = __toModule(require("obsidian"));
function createLinks(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    if (multipleChapters.test(userInput)) {
      return getLinksForChapters(app, userInput, linkType, useNewLine, settings);
    } else {
      return getLinksForVerses(app, userInput, linkType, useNewLine, settings);
    }
  });
}
function getLinksForVerses(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserVerseInput(userInput);
    bookAndChapter = capitalize(bookAndChapter);
    if (settings.verifyFilesWhenLinking) {
      const { fileName, tFile } = getFileByFilename(app, bookAndChapter);
      if (!tFile) {
        new import_obsidian4.Notice(`File "${fileName}" does not exist and verify files is set to true`);
        throw `File ${fileName} does not exist, verify files = true`;
      }
    }
    if (beginVerse > endVerse) {
      new import_obsidian4.Notice("Begin verse is bigger than end verse");
      throw "Begin verse is bigger than end verse";
    }
    let res = "";
    const beginning = linkType === LinkType.Embedded ? "!" : "";
    const ending = linkType === LinkType.Invisible ? "|" : "";
    for (let i = beginVerse; i <= endVerse; i++) {
      res += `${beginning}[[${bookAndChapter}${settings.linkSeparator}${settings.versePrefix}${i}${ending}]]`;
      if (useNewLine) {
        res += "\n";
      }
    }
    return res;
  });
}
function getLinksForChapters(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    const { book, firstChapter, lastChapter } = parseUserBookInput(userInput);
    if (firstChapter > lastChapter) {
      new import_obsidian4.Notice("Begin chapter is bigger than end chapter");
      throw "Begin chapter is bigger than end chapter";
    }
    let res = "";
    for (let i = firstChapter; i <= lastChapter; i++) {
      res += `[[${book} ${i}]]`;
      if (useNewLine) {
        res += "\n";
      }
    }
    return res;
  });
}

// src/modals/link-verse-modal.ts
var LinkType;
(function(LinkType2) {
  LinkType2["Basic"] = "Basic";
  LinkType2["Embedded"] = "Embedded";
  LinkType2["Invisible"] = "Invisible";
})(LinkType || (LinkType = {}));
var LinkVerseModal = class extends import_obsidian5.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield createLinks(this.app, this.userInput, this.linkType, this.useNewLine, this.pluginSettings);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
    this.linkType = this.pluginSettings.linkTypePreset;
    this.useNewLine = this.pluginSettings.newLinePreset;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Create Obsidian links from Bible reference" });
    new import_obsidian5.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
    }).inputEl.focus());
    new import_obsidian5.Setting(contentEl).setName("Link type").addDropdown((dropdown) => {
      dropdown.addOption(LinkType.Basic, LinkType.Basic);
      dropdown.addOption(LinkType.Embedded, LinkType.Embedded);
      dropdown.addOption(LinkType.Invisible, LinkType.Invisible);
      dropdown.onChange((value) => this.linkType = value);
      dropdown.setValue(this.pluginSettings.linkTypePreset);
    });
    new import_obsidian5.Setting(contentEl).setName("Each link on new line?").addToggle((tgl) => {
      tgl.setValue(this.pluginSettings.newLinePreset);
      tgl.onChange((val) => this.useNewLine = val);
    });
    new import_obsidian5.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian6 = __toModule(require("obsidian"));
var SettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Copy and Link Bible verses command" });
    containerEl.createEl("h4", { text: "Functional" });
    new import_obsidian6.Setting(containerEl).setName("Verse offset").setDesc('Change this if wrong verses are being linked, e.g. you want "Gen 1,1-3" but output is text from verses 2-4 \u2192 set this to -1').setClass("important-setting").addText((inputBox) => inputBox.setValue(this.plugin.settings.verseOffset.toString()).onChange((value) => __async(this, null, function* () {
      const number = Number.parseInt(value);
      if (value === "-")
        return;
      if (Number.isNaN(number)) {
        new import_obsidian6.Notice("Invalid input, please insert valid integer");
        inputBox.setValue("");
        return;
      }
      this.plugin.settings.verseOffset = number;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Verse heading level").setDesc('If set, only headings of specified level are considered verses (if first heading of this level is always a verse, also set "Verse offset" to -1)').addDropdown((dropdown) => {
      var _a, _b;
      dropdown.addOption("any", "any");
      dropdown.addOption("6", "######");
      dropdown.addOption("5", "#####");
      dropdown.addOption("4", "####");
      dropdown.addOption("3", "###");
      dropdown.addOption("2", "##");
      dropdown.addOption("1", "#");
      dropdown.setValue((_b = (_a = this.plugin.settings.verseHeadingLevel) == null ? void 0 : _a.toString()) != null ? _b : "any");
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.verseHeadingLevel = value === "any" ? void 0 : Number(value);
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h4", { text: "Inserted prefixes/postfixes" });
    new import_obsidian6.Setting(containerEl).setName("Line prefix").setDesc("String inserted in front of every line, for example '>' for quote. Note: If you set 'Put each verse on a new line?' to true, the prefix will be inserted in front of every line.").setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.prefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.prefix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Link postfix").setDesc("String inserted after biblical link, you can use \\n to insert newline.").addText((inputBox) => inputBox.setPlaceholder("Insert postfix here").setValue(this.plugin.settings.postfix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.postfix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Each verse prefix").setDesc('String inserted in front of every copied verse. You can use "{n}" where you want number of given verse inserted, for example "**{n}** " will make each verse start with bold verse number. You can also use "{f}" to insert name of the corresponding file (for example to create obsidian links). Leave empty for no prefix.').addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.eachVersePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.eachVersePrefix = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Links" });
    new import_obsidian6.Setting(containerEl).setName("Link to last verse?").setDesc("Should last verse be linked in the visible link before text of verses?").addToggle((toggle) => toggle.setValue(this.plugin.settings.linkEndVerse).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkEndVerse = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Add invisible links?").setDesc("Invisible links are added to each verse used (so you can find the connections later), they are only visible in source mode.").addToggle((toggle) => toggle.setValue(this.plugin.settings.useInvisibleLinks).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.useInvisibleLinks = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Output format" });
    new import_obsidian6.Setting(containerEl).setName("Put each verse on a new line?").setDesc("Each verse is inserted on a new line (with Link prefix).").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLines).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLines = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Insert space between verses?").setDesc("Should space be inserted between verses? (Only applied when Put each verse on a new line? is se to false. Useful for languages such as Chinese.)").setDisabled(!this.plugin.settings.newLines).addToggle((toggle) => toggle.setValue(this.plugin.settings.insertSpace).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.insertSpace = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Notation" });
    new import_obsidian6.Setting(containerEl).setName("One verse notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying one verse. For example "." \u2192 Gen 1.1.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.oneVerseNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.oneVerseNotation = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Multiple verses notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying multiple verses. For example "," \u2192 Gen 1,1-3.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.multipleVersesNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.multipleVersesNotation = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Multiple translations" });
    containerEl.createEl("p", {
      text: "As of right now this is an experimental feature. If you encounter any bugs or you can not figure things out create issue on the GitHub page of this plugin."
    });
    new import_obsidian6.Setting(containerEl).setName("Enable multiple translations").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableMultipleTranslations).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.enableMultipleTranslations = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.enableMultipleTranslations) {
      new import_obsidian6.Setting(containerEl).setName("Paths to translations with their names").setDesc('Input full paths to folders containing Bible translations, each trnaslation on separate line. An example of one entry: "Bible/NIV/". The plugin will search for corresponding Bible files using given paths as starting points. Make sure there are no duplicate files in given paths, otherwise it is hard to tell what the output will be. The first translation will be considered your main translation.').addTextArea((inputBox) => inputBox.setPlaceholder("Bible/NIV/\nBible/ESV/").setValue(this.plugin.settings.translationsPaths).onChange((value) => __async(this, null, function* () {
        const inputPaths = value.split(/\r?\n|\r/);
        const paths = [];
        inputPaths.forEach((path) => {
          if (path.at(-1) !== "/") {
            paths.push(path + "/");
          } else {
            paths.push(path);
          }
        });
        this.plugin.settings.translationsPaths = value;
        this.plugin.settings.parsedTranslationPaths = paths;
        yield this.plugin.saveSettings();
      })));
      new import_obsidian6.Setting(containerEl).setName("What to link").setDesc("Choose what translations should be linked when copying a verse.").addDropdown((dropdown) => {
        dropdown.addOption("all", "Link to all translations");
        dropdown.addOption("used", "Link only to used translation");
        dropdown.addOption("usedAndMain", "Link to used and main translation");
        dropdown.addOption("main", "Link only to main translation");
        dropdown.setValue(this.plugin.settings.translationLinkingType);
        dropdown.onChange((value) => __async(this, null, function* () {
          this.plugin.settings.translationLinkingType = value;
          yield this.plugin.saveSettings();
        }));
      });
    }
    containerEl.createEl("h2", { text: "Link Bible verses command" });
    containerEl.createEl("h4", { text: "File format" });
    new import_obsidian6.Setting(containerEl).setName("Link separator").setDesc("This is the separator that will be used when linking, e.g. if you enter '#' here, output will be [[Gen 1#1]]. If you are using headings to mark verses, use '#'. If you are using block references, use '^'.").setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert separator here").setValue(this.plugin.settings.linkSeparator).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkSeparator = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian6.Setting(containerEl).setName("Verse prefix").setDesc('Fill this if you are using verse prefixes in your bible files, e.g. you have "v1" in your file \u2192 set to "v".').setClass("important-setting").addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.versePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.versePrefix = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Defaults" });
    new import_obsidian6.Setting(containerEl).setName("Link type default value").setDesc("Value that will be selected by default in link modal.").addDropdown((dropdown) => {
      dropdown.addOption(LinkType.Basic, LinkType.Basic);
      dropdown.addOption(LinkType.Embedded, LinkType.Embedded);
      dropdown.addOption(LinkType.Invisible, LinkType.Invisible);
      dropdown.setValue(this.plugin.settings.linkTypePreset);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.linkTypePreset = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian6.Setting(containerEl).setName("Use new lines default value").setDesc("Value that will be selected by default in link modal.").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLinePreset).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLinePreset = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h4", { text: "Misc" });
    new import_obsidian6.Setting(containerEl).setName("Verify files?").setDesc("Verify existence of files you are trying to link, so that you are not inserting wrong references by mistake.").addToggle((toggle) => toggle.setValue(this.plugin.settings.verifyFilesWhenLinking).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.verifyFilesWhenLinking = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  verseOffset: 0,
  verseHeadingLevel: void 0,
  prefix: "",
  postfix: "",
  eachVersePrefix: "",
  linkEndVerse: false,
  useInvisibleLinks: true,
  newLines: false,
  insertSpace: true,
  oneVerseNotation: ".",
  multipleVersesNotation: ",",
  enableMultipleTranslations: false,
  translationsPaths: "",
  parsedTranslationPaths: [],
  translationLinkingType: "all",
  linkSeparator: "#",
  versePrefix: "",
  linkTypePreset: LinkType.Basic,
  newLinePreset: true,
  verifyFilesWhenLinking: false
};
var BibleLinkerPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.openCopyModal = () => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (view) {
        new CopyVerseModal(this.app, this.settings, (str) => view.editor.replaceRange(str, view.editor.getCursor())).open();
      }
    };
    this.openObsidianLinkModal = () => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (view) {
        new LinkVerseModal(this.app, this.settings, (str) => view.editor.replaceRange(str, view.editor.getCursor())).open();
      }
    };
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SettingsTab(this.app, this));
      this.addCommand({
        id: "insert-bible-link",
        name: "Copy and Link Bible verses",
        editorCallback: this.openCopyModal
      });
      this.addCommand({
        id: "insert-bible-link-obsidian-link",
        name: "Link Bible verses",
        editorCallback: this.openObsidianLinkModal
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
